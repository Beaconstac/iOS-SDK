// Generated by Apple Swift version 5.0 (swiftlang-1001.0.69.5 clang-1001.0.46.3)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreData;
@import ObjectiveC;
@import UserNotifications;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Beaconstac",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class Beaconstac;
@class MBeacon;

/// Beacon Delegate to listen to beacons related callbacks.
SWIFT_PROTOCOL("_TtP10Beaconstac14BeaconDelegate_")
@protocol BeaconDelegate
/// Non optional method, sends a callback if any error occures in the SDK, use BeaconstacSDKError to determine what went wrong
- (void)didFail:(Beaconstac * _Nonnull)beaconstac error:(NSError * _Nonnull)error;
@optional
/// As soon as we detect a beacon related to your account, we invoke this with the place name.
- (void)didEnterRegion:(Beaconstac * _Nonnull)beaconstac region:(NSString * _Nonnull)region;
/// Ranging of beacons which is objects of the class MBeacon
- (void)didRangeBeacons:(Beaconstac * _Nonnull)beaconstac beacons:(NSArray<MBeacon *> * _Nonnull)beacons;
/// SDK triggers this if it finds a beacon who’s RSSI is less than -75.
- (void)campOnBeacon:(Beaconstac * _Nonnull)beaconstac beacon:(MBeacon * _Nonnull)beacon;
/// SDK triggers this if it finds a beacon who’s RSSI is -75 + the BEACON_EXIT_BIAS.
- (void)exitBeacon:(Beaconstac * _Nonnull)beaconstac beacon:(MBeacon * _Nonnull)beacon;
/// As soon as SDK sees no beacons near the device location and there was a region enter invoked prior to this call.
- (void)didExitRegion:(Beaconstac * _Nonnull)beaconstac region:(NSString * _Nonnull)region;
@end

typedef SWIFT_ENUM(NSInteger, BeaconHardwareType, closed) {
  BeaconHardwareTypeUnknown = 0,
  BeaconHardwareTypeIndoor = 1,
  BeaconHardwareTypeOutdoor = 2,
  BeaconHardwareTypePocket = 3,
  BeaconHardwareTypeKeychain = 4,
  BeaconHardwareTypeLongrange = 5,
  BeaconHardwareTypeUsb = 6,
};

@protocol RuleProcessorDelegate;
@protocol NotificationDelegate;
@protocol WebhookDelegate;
enum LatchLatency : int64_t;
enum iBeaconOption : NSInteger;
@class NSNumber;

/// This is the main class where you configure Beaconstac SDK. You provide the Developer Token which is present on your account page and you can configure beacon monitoring and ranging based on your requirement.
SWIFT_CLASS("_TtC10Beaconstac10Beaconstac")
@interface Beaconstac : NSObject
/// Listen to this delegate to recieve when we monitor regions, range beacons and if any error occurred in the process
@property (nonatomic, weak) id <BeaconDelegate> _Nullable delegate;
/// Listen to this delegate to know when we trigger the what rule which is set by the markerter on the dashboard
@property (nonatomic, weak) id <RuleProcessorDelegate> _Nullable ruleDelegate;
/// Listen to this delegate to customize the UNNotfication and to display it yourself.
@property (nonatomic, weak) id <NotificationDelegate> _Nullable notificationDelegate;
/// Listen to this delegate to add additional parameters while executing a webhook.
@property (nonatomic, weak) id <WebhookDelegate> _Nullable webhookDelegate;
/// Defines the camp off behaviour when the SDK finds a nearby beacon who’s RSSI is less than the (camped on beacon’s latest RSSI + latch latency). Default is MEDIUM.
@property (nonatomic) enum LatchLatency latchLatency;
/// Get the sharedInstance at any point in time after initializing using token
///
/// throws:
/// If you never initialized using token
///
/// returns:
/// Beaconstac instance or nil
+ (Beaconstac * _Nullable)sharedInstanceAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Initialize the SDK using this class method
/// \param token Part of the iBeacon Platform in Beaconstac dashboard, to authorize for the API endpoints
///
/// \param ibeaconOption Optional, determines how the SDK does region monitoring and beacon ranging
///
/// \param organization Optional, part of the Beaconstac dashborad.
///
/// \param delegate Optional, to listen to the BeaconDelegate callbacks, if you don’t provide the delegate we will startScanningForBeacons once we have required data.
///
/// \param completion this is called once the SDK gets initialised successfully or if any error occurs.
///
+ (void)sharedInstance:(NSString * _Nonnull)token ibeaconOption:(enum iBeaconOption)ibeaconOption organization:(NSNumber * _Nullable)organization delegate:(id <BeaconDelegate> _Nullable)delegate completion:(void (^ _Nonnull)(Beaconstac * _Nullable, NSError * _Nullable))completion;
/// Invoke this method if you want the SDK to scan for beacons. Based on the SDK configuration this determines when to start scanning beacons.
- (void)startScanningBeacons;
/// Invoke this method if you want the SDK to stop scanning in between the process.
- (void)stopScanningBeacons;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class MVisitor;

@interface Beaconstac (SWIFT_EXTENSION(Beaconstac))
/// The marketer sets the trigger conditions for the rules. Use this method to provide valuable information regarding the app user. If the marketer has set the filter and you don’t provide the filters to the SDK, we treat it as trigger failure. Make sure you provide valuable information regarding app users.
/// \param filters Pass in a dictionary to set the filters, the keys are case senitive. We will check the filters set by the marketer on the dashboard to validate the trigger.
///
- (void)addFilters:(NSDictionary<NSString *, id> * _Nonnull)filters;
/// This is the data we send as part of the analytics events. By default the visitor is initialized with <em>Visitor</em> as the first name.
/// \param visitor If you know details about the app user create a Visitor object and send SDK.
///
- (void)setVisitor:(MVisitor * _Nonnull)visitor;
@end

@class UNNotification;

@interface Beaconstac (SWIFT_EXTENSION(Beaconstac))
/// After the notification will present with options is called on the UNNotificationCentreDelegate callback check if SDK can handle notification
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     notification: UNNotification to process the presentation options
///   </li>
/// </ul>
///
/// returns:
/// UNNotificationPresentationOptions or nil
- (UNNotificationPresentationOptions)notificationOptionsForBeaconstacNotification:(UNNotification * _Nonnull)notification SWIFT_WARN_UNUSED_RESULT;
/// After the notification did receive response is called on the UNNotificationCentreDelegate callback check if SDK can handle notification
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     notification: UNNotification to process the displaying of markdown card if it contains the SDK_MARKDOWN_CARD_URL_KEY in the request content’s user info.
///   </li>
/// </ul>
///
/// returns:
/// If SDK can handle the notification
- (BOOL)showCardViewerForLocalNotification:(UNNotification * _Nonnull)notification SWIFT_WARN_UNUSED_RESULT;
/// After we display the markdown card, if you wishes dimiss the viewer call this method.
- (void)dismissCardViewer;
@end

/// Error codes if any error occurs inside SDK, the domain name is com.beaconstac.sdk.error
typedef SWIFT_ENUM(NSInteger, BeaconstacSDKError, closed) {
/// Indicate that the SDK is not configured yet for you to use.
  BeaconstacSDKErrorSDKNotInitialized = -1001,
/// If the app doesn’t have authorization to use bluetooth or the Bluetooth is disabled in the Device.
  BeaconstacSDKErrorBluetoothDisabled = -1002,
/// The app doesn’t have authorization to use location
  BeaconstacSDKErrorLocationPermissionDenied = -1003,
/// The app doesn’t have authorization for when in use and your SDK setting wants it.
  BeaconstacSDKErrorLocationTrackingWhenInUseDenied = -1004,
/// The app doesn’t have authorization for always and your SDK setting wants it.
  BeaconstacSDKErrorLocationTrackingAlwaysDenied = -1005,
/// The device doesn’t support ranging
  BeaconstacSDKErrorCannotRangeBeacons = -1006,
/// Conversion failures, please contact Beaconstac in case this happens
  BeaconstacSDKErrorUnableToConvertStringToDate = -1007,
/// Conversion failures, please contact Beaconstac in case this happens
  BeaconstacSDKErrorUnableToConvertDateToString = -1008,
/// If the marketer set a invalid url for webhook on the dashboard
  BeaconstacSDKErrorUnableToCreateURL = -1009,
/// If the parameters you sent to webhook to configure isn’t properly formated
  BeaconstacSDKErrorUnableToCreateWebhookHTTPBody = -1010,
/// Posting to webhook request failed
  BeaconstacSDKErrorPostingToWebhookFailed = -1011,
/// Error occured while performing network tasks
  BeaconstacSDKErrorNetworkErrorOccurred = -1012,
/// Cached data not found
  BeaconstacSDKErrorNotConnectedToInternet = -1013,
/// Cached data not found
  BeaconstacSDKErrorCachedDataNotFound = -1014,
/// User not found with this email
  BeaconstacSDKErrorUserNotFound = -1015,
/// Invalid request
  BeaconstacSDKErrorInvalidRequest = -1016,
};

typedef SWIFT_ENUM(NSInteger, HardwareState, closed) {
  HardwareStateActive = 0,
  HardwareStateSleeping = 1,
};

typedef SWIFT_ENUM(int64_t, LatchLatency, closed) {
  LatchLatencyLOW = 3,
  LatchLatencyMEDIUM = 5,
  LatchLatencyHIGH = 7,
};


/// Abstract super calss of Notification and Webhook
SWIFT_CLASS("_TtC10Beaconstac7MAction")
@interface MAction : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class MHardware;

/// The beacon class which includes both the Beaconstac related data as well as the hardware beacon data.
SWIFT_CLASS("_TtC10Beaconstac7MBeacon")
@interface MBeacon : NSObject
/// The id of the beacon
@property (nonatomic, readonly) int64_t id;
/// The name of the beacon
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// The campedOn status
@property (nonatomic, readonly) BOOL isCampedOn;
/// The state of the beacon
@property (nonatomic, readonly) enum HardwareState state;
/// The place id of the beacon
@property (nonatomic, readonly) int64_t place;
/// The place name of the beacon
@property (nonatomic, readonly, copy) NSString * _Nonnull placeName;
/// The latitude of the beacon
@property (nonatomic, readonly) double latitude;
/// The longitude of the beacon
@property (nonatomic, readonly) double longitude;
/// The tags associated with the beacon
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull tags;
/// The hardware object of the beacon
@property (nonatomic, readonly, strong) MHardware * _Nonnull hardware;
@property (nonatomic) int64_t latestRSSI;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The eddystone class which is as part of the Hardware class. This is read only class
SWIFT_CLASS("_TtC10Beaconstac10MEddystone")
@interface MEddystone : NSObject
/// The eddystone nid parameter of the beacon hardware
@property (nonatomic, readonly, copy) NSString * _Nonnull nid;
/// The eddystone bid parameter of the beacon hardware
@property (nonatomic, readonly, copy) NSString * _Nonnull bid;
/// The eddystone url parameter of the beacon hardware
@property (nonatomic, readonly, copy) NSString * _Nonnull url;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The hardware related properties in this class, which is as part of the MBeacon class. This is read only class
SWIFT_CLASS("_TtC10Beaconstac9MHardware")
@interface MHardware : NSObject
/// The uuid of the beacon hardware
@property (nonatomic, readonly, copy) NSString * _Nonnull UUID;
/// The major of the beacon hardware
@property (nonatomic, readonly) int64_t major;
/// The minor of the beacon hardware
@property (nonatomic, readonly) int64_t minor;
/// The serial number of the beacon hardware
@property (nonatomic, readonly, copy) NSString * _Nonnull serialNumber;
/// The mode of the beacon hardware
@property (nonatomic, readonly, copy) NSString * _Nonnull mode;
/// The temperature of the beacon hardware
@property (nonatomic, readonly) int64_t temperature;
/// The battery of the beacon hardware
@property (nonatomic, readonly) int64_t battery;
/// The advertising interval of the beacon hardware
@property (nonatomic, readonly) int64_t advertisingInterval;
/// The transmission power of the beacon hardware
@property (nonatomic, readonly) int64_t transmissionPower;
/// The firmware version of the beacon hardware
@property (nonatomic, readonly, copy) NSString * _Nonnull firmwareVersion;
/// The hardware type of the beacon
@property (nonatomic, readonly) enum BeaconHardwareType type;
/// The eddystone object of the beacon hardware
@property (nonatomic, readonly, strong) MEddystone * _Nonnull eddystone;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The markdown card class to handle the loading of markdown if assocaited with the notification
SWIFT_CLASS("_TtC10Beaconstac13MMarkdownCard")
@interface MMarkdownCard : NSObject
/// The id of the markdown card
@property (nonatomic, readonly) int64_t id;
/// The title of the markdown card
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// The url of the markdown card
@property (nonatomic, readonly, copy) NSString * _Nonnull url;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum MNFCTagType : NSInteger;

SWIFT_CLASS("_TtC10Beaconstac7MNFCTag")
@interface MNFCTag : NSObject
/// The id of the nfcTag
@property (nonatomic, readonly) int64_t id;
/// The name of the nfcTag
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// The url of the nfcTag
@property (nonatomic, readonly, copy) NSString * _Nonnull url;
/// The url of the nfcTag
@property (nonatomic, readonly, copy) NSString * _Nonnull uid;
/// The counter of the nfcTag
@property (nonatomic, readonly) int64_t counter;
/// The state of the tag
@property (nonatomic, readonly) enum HardwareState state;
/// The place id of the tag
@property (nonatomic, readonly) int64_t place;
/// The place name of the tag
@property (nonatomic, readonly, copy) NSString * _Nonnull placeName;
/// The tags associated with the beacon
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull tags;
/// The hardware type of the beacon
@property (nonatomic, readonly) enum MNFCTagType type;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, MNFCTagType, closed) {
  MNFCTagTypeUnknown = 0,
  MNFCTagTypeSticker = 7,
  MNFCTagTypeKeycard = 8,
};


/// The Notification class to handle the notification action.
SWIFT_CLASS("_TtC10Beaconstac13MNotification")
@interface MNotification : MAction
/// The id of the notification
@property (nonatomic, readonly) int64_t id;
/// The title of the notification
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// The body of the notification
@property (nonatomic, readonly, copy) NSString * _Nonnull body;
/// The okActionURL of the notification, if the user clicks on the notification load the url.
@property (nonatomic, readonly, copy) NSString * _Nullable okActionURL;
/// The markdown card assocaited with the notification as set by the marketer on the dashboard.
@property (nonatomic, readonly, strong) MMarkdownCard * _Nullable markdownCard;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The rule class which determines when to trigger and what action to perform
SWIFT_CLASS("_TtC10Beaconstac5MRule")
@interface MRule : NSObject
/// The id of the rule
@property (nonatomic, readonly) int64_t id;
/// The name of the rule
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// The dwell time of the rule
/// The dwell time on entry determines after how many seconds should the rule get triggred
/// The dwell time on exit determines if the user stayed certain time after the entry event.
@property (nonatomic, readonly) int64_t dwellTime;
/// The rule by as assigned by the marketer on the dashboard.
@property (nonatomic, readonly, copy) NSString * _Nonnull ruleBy;
/// When to trigger the event.
/// <ul>
///   <li>
///     1: Entry
///   </li>
///   <li>
///     2: Exit
///   </li>
/// </ul>
@property (nonatomic, readonly) int64_t triggerEvent;
/// Actions assigned to the rule. Action is a abstract super class, it can be of only two types either Notification or Webhook both are concrete classes
@property (nonatomic, readonly, copy) NSArray<MAction *> * _Nonnull actions;
/// Place names if the rule is associated by rule by place.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable placeNames;
/// Determines if the marketer has activated/paused the rule on the dashboard.
- (BOOL)isActive SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The visitor class used to collect analytics related data of the app user, along with this information we send vendorId, deviceModel, os information, bundle information, sdk information
SWIFT_CLASS("_TtC10Beaconstac8MVisitor")
@interface MVisitor : NSObject
/// The first name of the visitor
@property (nonatomic, readonly, copy) NSString * _Nonnull firstName;
/// The last name of the visitor
@property (nonatomic, readonly, copy) NSString * _Nonnull lastName;
/// The email of the visitor
@property (nonatomic, readonly, copy) NSString * _Nullable email;
/// The age of the visitor
@property (nonatomic, readonly, strong) NSNumber * _Nullable age;
/// The gender of the visitor
@property (nonatomic, readonly, copy) NSString * _Nullable gender;
/// Initialise the Visitor object and send it as part of the Beaconstac.
/// \param firstName first name of the visitor
///
/// \param lastName last name of the visitor
///
/// \param email optional email of the visitor
///
/// \param age optional age of the visitor in int
///
/// \param gender optional gender of the visitor in string
///
- (nonnull instancetype)init:(NSString * _Nonnull)firstName lastName:(NSString * _Nonnull)lastName email:(NSString * _Nullable)email age:(NSNumber * _Nullable)age gender:(NSString * _Nullable)gender OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The Webhook class to handle the webhook action.
SWIFT_CLASS("_TtC10Beaconstac8MWebhook")
@interface MWebhook : MAction
/// The id of the webhook
@property (nonatomic, readonly) int64_t id;
/// The name of the webhook
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// The post url of the webhook
@property (nonatomic, readonly, copy) NSString * _Nonnull url;
/// The status of the url as determined by the server
@property (nonatomic, readonly, copy) NSString * _Nonnull status;
/// The parameters to be sent as part of the post body which is set by the marketer.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable params;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSEntityDescription;
@class NSManagedObjectContext;

SWIFT_CLASS_NAMED("NFCTagEntity")
@interface NFCTagEntity : NSManagedObject
- (nonnull instancetype)initWithEntity:(NSEntityDescription * _Nonnull)entity insertIntoManagedObjectContext:(NSManagedObjectContext * _Nullable)context OBJC_DESIGNATED_INITIALIZER;
@end






/// The notification delegate
SWIFT_PROTOCOL("_TtP10Beaconstac20NotificationDelegate_")
@protocol NotificationDelegate
/// Set this delegate on the Beaconstac object if you wish you override the displaying of the notification. If you listen to this callback, you are responsible on how and when to trigger the notification.
- (void)overrideNotification:(Beaconstac * _Nonnull)beaconstac notification:(MNotification * _Nonnull)notification;
@end


/// The RuleProcessorDelegate, use this to know when the rules get triggered.
SWIFT_PROTOCOL("_TtP10Beaconstac21RuleProcessorDelegate_")
@protocol RuleProcessorDelegate
/// This callback is triggered just before the rule is executed
- (void)willTriggerRule:(Beaconstac * _Nonnull)beaconstac rule:(MRule * _Nonnull)rule;
/// This callback is triggered after the rule is executed
- (void)didTriggerRule:(Beaconstac * _Nonnull)beaconstac rule:(MRule * _Nonnull)rule;
@end


/// The webhook delegate
SWIFT_PROTOCOL("_TtP10Beaconstac15WebhookDelegate_")
@protocol WebhookDelegate
/// Set this delegate on the Beaconstac object, if you wish to add additional parameters as part of the post body to the webhook.
- (NSDictionary<NSString *, id> * _Nonnull)addParameters:(Beaconstac * _Nonnull)beaconstac webhook:(MWebhook * _Nonnull)webhook SWIFT_WARN_UNUSED_RESULT;
@end

/// The iBeaconOption specifies how the SDK monitors and ranges beacon.
typedef SWIFT_ENUM(NSInteger, iBeaconOption, closed) {
/// This ranges beacons in background only if the display wakes up. Requires always location Authorization
  iBeaconOptionBackgroundRangeOnDisplayWakeUp = 0,
/// This ranges beacons only in foreground, requires when in use location Authorization
  iBeaconOptionWhenInUseRange = 1,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
